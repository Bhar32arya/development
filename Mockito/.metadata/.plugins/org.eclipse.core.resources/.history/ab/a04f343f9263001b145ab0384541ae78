package com.practise.mockito.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;

import com.practise.mockito.dto.Book;
import com.practise.mockito.repo.BookRepositories;



class BookServiceTest {
	
	@InjectMocks
	BookService bookService;
	
	@Mock
	private BookRepositories bookRepositories;
	
	@Test
	public void numberOfBooksTest() {
		
		
		Book one = new Book(1, "bharat", LocalDate.now(), 250);
		Book two = new Book(2, "arya", LocalDate.now(), 500);
		
		List<Book> books = new ArrayList<Book>();
		books.add(one);
		books.add(two);
		
		when(bookRepositories.findAll()).thenReturn(books);
		
		
		assertEquals(2, bookService.numberOfBooks());
		
	}
	
	@Test
	public void getNewDiscountTest() {
		
		Book one = new Book(1, "bharat", LocalDate.now(), 250);
		Book two = new Book(2, "arya", LocalDate.now(), 500);
		
		List<Book> books = new ArrayList<Book>();
		books.add(one);
		books.add(two);
		when(bookRepositories.findNewBooks(5)).thenReturn(books);
		
		List<Book> booksFromDB = bookService.getNewDiscount(100, 5);
		
		assertEquals(2, booksFromDB.size());
		
	}
	
	
	@Test
	public void addBooksTest() {
		
		BookRepositories bookRepositories = Mockito.mock(BookRepositories.class);
		BookService bookService = new BookService(bookRepositories);
		
		Book one = new Book(1, "bharat", LocalDate.now(), 250);
		Mockito.verify(bookRepositories).saveBook(one);
		
	}
}
